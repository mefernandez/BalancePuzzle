About the kata by @eloy_iv

In this kata you'll find a Java implementation. Although I'm not an expert in TDD,
I tried my best to remain as YAGNI as I could.

The code is pretty straightforward. It's divided into Java code and JUnit test.
I developed it using standard Eclipse.

You'll see I organized some packages following the evolution of tests and code refactoring.
It would seem a little awkward to do this homemade versioning and hosting the whole thing
at github.com, but I find it more easy to navigate through folders to quickly see what's changing
from one version to another rather than using Git itself. Maybe I'm wrong.

So here's what's into each package version.

.v1
Basic tests for 0, 1 and 2 marbles. Very helpful to clear out some things from my mind,
like deciding classnames and basic API. Well, that's what TDD is for, isn't it?

.v2
When I wrote the test with 3 marbles, dummy code was no longer an option so I stopped lying
to myself and started to implement some actual code. Not much though, just to pass the test.
The Scales class came up naturally in this version.

.v3
Dealing with a test with 4 marbles just forced me to start dealing with array splits and chops.
I even had to do a little spike on Arrays.copyRange because its functionality wasn't quite 
clear to me.

.v4
Tests started to ask for some refactoring, so everything in this version is just about that.

.v5
I felt the test could be leaving out some combinations of marbles that could be a problem
to the binary chop algorithm, so I decided to create a test to try all different possibilities
with up to 4 marbles before increasing the size of the problem.
Let [o,x]* be the set of all possibilities of marbles combinations were [x] is the heaviest
Then this is the set of tests and expected weighins according to a binary chop algorithm
granted that chopping an odd number of marbles the last marbles remains out of the chopping scope:
[x]: 0
[x,o]*: 1
[x,o,o]*: 1
[x,o,o,o]*: 2

Up to 4 marbles everything worked like a charm, but when I added one more marble to the list,
the test failed:

[x,o,o,o,o]: 2
[o,o,o,o,x]: 1!

What's going on here? It's plain to see. In the first case, the heaviest marble is weighed,
[x,o] <-> [o,o]
leaning the scales to the left, thus forcing a second weighing of
[x] <-> [o]
which yields the right result. The same thing happens until the [x] reaches the last position.
In that case, the balance scales remain balanced, and therefore there's no need to weigh again:
the heaviest marble can only be in the last element!   

Summarizing: In this version, I preferred to leave the test that try out all
possibilities up to 4 marbles, and test the 5 marbles case apart, just for now.

.v6
Ok, time to test up to 8 marbles, without changing the algorithm just yet. Using the binary
chop algorithm the expected amount of weighings is always 3. But it can be done better!
For that we'll have to switch the algorithm, which is the goal of the next version!
 
.v7 
Time to do some refactoring. I have to make room for other algorithms other than binary chop.
In this iteration I just want to encapsulate the binary chop algorithm and move it away from
the Solver class. I started by extracting a super abstract class that holds the Scales and
the basic interface to solve the problem, and pushed down the recursive behaviour. I also
encapsulated the BinaryChop into a class. It sill needs work, but all tests are running fine, 
so I'll leave it right there.



